<?php

/**
 * hook_menu
 */
function google_places_node_menu() {

  $items = array();

  $items['admin/config/google-places-node'] = array(
    'title' => 'Google Places Node Settings',
    'description' => 'Confiure import settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_places_node_settings'),
    'access arguments' => array('Administer google places'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Settings form
 *
 * @return array
 */
function google_places_node_settings() {
  $form = array();

  $form['google_places_node_foo'] = array(
    '#type' => 'textfield',
    '#title' => t('Foo.'),
    '#default_value' => variable_get('google_places_node_foo', ''),
    '#size' => 20,
    '#maxlength' => 50,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 *
 * Allows user to specify whether a node type is to be asscoiated with a Google Place
 */
function google_places_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {

    $form['workflow']['#weight'] = isset($form['workflow']['#weight']) ? $form['workflow']['#weight'] + 1 : 1;
    $form['submit']['#weight'] = isset($form['submit']['#weight']) ? $form['submit']['#weight'] + 1 : 1;
    $form['delete']['#weight'] = isset($form['delete']['#weight']) ? $form['delete']['#weight'] + 1 : 1;

    $form['google_places_node'] = array(
      '#type' => 'fieldset',
      '#title' => t('Google Places'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#attributes' => array('id' => 'google-places-node-node-type-form'),
    );

    $form['google_places_node']['google_places_node_type'] = array(
      '#type' => 'checkbox',
      '#title' => t('Associate with Google Places'),
      '#default_value' => variable_get('google_places_node_' . $form['#node_type']->type, 0),
      '#return_value' => 1,
      '#weight' => -5,
    );
    $form['#submit'][] = 'google_places_node_type_form_submit';
  }

  if (isset($form['type'])) {
    if ($form['type']['#value'] . '_node_form' == $form_id) {

      if (variable_get('google_places_node_' . $form['type']['#value'], 0)) {

        $form['google_places'] = array(
          '#type' => 'fieldset',
          '#access' => user_access('administer google places'),
          '#title' => t('Google Places'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#weight' => 20,
        );

        $form['google_places']['google_places_reference'] = array(
          '#type' => 'textfield',
          '#default_value' => empty($form['#node']->nid) ? '' : $form['#node']->google_places_reference,
          //'#access' => user_access('administer google places'),
          '#title' => t('Place ID'),
          '#maxlength' => 255,
        );
      }
    }
    return;
  }
}

/**
 *	Submit handler for the node type form
 */
function google_places_node_type_form_submit($form, &$form_state) {
  variable_set('google_places_node_' . $form_state['values']['type'], $form_state['values']['google_places_node_type']);
}

/**
 * Implements hook_nodeapi().
 *
 * @param $node
 * @param $op
 * @param $a3
 * @param $a4
 * @return void
 */
function google_places_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (!variable_get('google_places_node_' . $node->type, 0)) {
    return false;
  }

  switch ($op) {
    case 'insert':
    case 'update':
      // TODO Please review the conversion of this statement to the D7 database API syntax.
      /* db_query("DELETE FROM {google_places_node} WHERE nid = %d", $node->nid) */
      db_delete('google_places_node')
  ->condition('nid', $node->nid)
  ->execute();
      if ($node->google_places_reference) {
        // TODO Please convert this statement to the D7 database API syntax.
        /* db_query("INSERT into {google_places_node} (nid, vid, reference) VALUES (%d, %d, '%s')", $node->nid, $node->vid, $node->google_places_reference) */
        NULL;
      }
      break;
    case 'load':
      return array(
        'google_places_reference' => db_query('SELECT reference FROM {google_places_node} WHERE nid = :nid AND vid = :vid', array(':nid' => $node->nid, ':vid' => $node->vid))->fetchField(),
      );
      break;
    case 'view':

      break;
    case 'delete':
      // TODO Please review the conversion of this statement to the D7 database API syntax.
      /* db_query('DELETE FROM {google_places_node} WHERE nid = %d', $node->nid) */
      db_delete('google_places_node')
  ->condition('nid', $node->nid)
  ->execute();
      break;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function google_places_node_get_place_info(&$node) {
  $endpoint = 'https://maps.googleapis.com/maps/api/place/details';

  $output = 'json'; // json or XML

  $params = array(
    'reference' => $node->google_places_reference,
    'sensor' => 'true',
    'key' => variable_get('google_places_api_key', ''),
    //'language'		=>	'en-GB',		
  );

  // http://unitstep.net/blog/2009/05/05/using-curl-in-php-to-access-https-ssltls-protected-sites/

  $url = str_replace('&amp;', '&', sprintf('%s/%s?%s', $endpoint, $output, http_build_query($params)));

  print $url;

  // Initialize session and set URL.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);

  // Set so curl_exec returns the result instead of outputting it.
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
  curl_setopt($ch, CURLOPT_CAINFO, getcwd() . '/' . drupal_get_path('module', 'google_places') . '/BuiltinObjectToken-EquifaxSecureCA.crt');

  // Get the response and close the channel.
  $response = curl_exec($ch);
  curl_close($ch);

  $record = new stdClass();
  $record->nid = $node->nid;
  $record->data = $response;

  $data = db_fetch_object(db_query('SELECT * FROM {google_places_node_place_info} WHERE nid = :nid LIMIT 1', array(':nid' => $node->nid)));

  if ($data) {
    $record->updated = REQUEST_TIME;
    drupal_write_record('google_places_node_place_info', $record, 'nid');
  }
  else {
    $record->created = REQUEST_TIME;
    drupal_write_record('google_places_node_place_info', $record);
  }

  $node->google_places_node_place_info = json_decode($response);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function google_places_node_update_nodes_place_info() {
  $result = db_query('SELECT n.nid FROM {node} n JOIN {node_revisions} nr ON n.nid = nr.nid JOIN {google_places_node} gpn ON n.nid = gpn.nid WHERE n.status = :n.status', array(':n.status' => 1));

  while ($data = db_fetch_object($result)) {
    $node = node_load($data->nid);
    google_places_node_get_place_info($node);
  }
}
